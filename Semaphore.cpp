/* 
    semaphore.cpp
*/

/*--------------------------------------------------------------------------*/
/* DEFINES */
/*--------------------------------------------------------------------------*/

    /* -- (none) -- */

/*--------------------------------------------------------------------------*/
/* INCLUDES */
/*--------------------------------------------------------------------------*/

#include <cassert>
#include <cstring>
#include <iostream>
#include "Semaphore.h"

using namespace std;

/*--------------------------------------------------------------------------*/
/* DATA STRUCTURES */ 
/*--------------------------------------------------------------------------*/

    /* -- (none) -- */

/*--------------------------------------------------------------------------*/
/* CONSTANTS */
/*--------------------------------------------------------------------------*/

    /* -- (none) -- */

/*--------------------------------------------------------------------------*/
/* FORWARDS */
/*--------------------------------------------------------------------------*/

    /* -- (none) -- */

/*--------------------------------------------------------------------------*/
/* FUNCTIONS */
/*--------------------------------------------------------------------------*/

Semaphore::Semaphore(int _val) {
	value = _val;
	pthread_mutex_init(&m, NULL);
	pthread_cond_init(&c, NULL);
}

int Semaphore::P() {
	pthread_mutex_lock(&m);
	while(value <= 0) {
		pthread_cond_wait(&c, &m);
	}
	--value;
	pthread_mutex_unlock(&m);
}

int Semaphore::V() {
	pthread_mutex_lock(&m);
	int old_value = value;
	++value;
	pthread_mutex_unlock(&m);
	
	if(old_value ==0) {
		pthread_cond_signal(&c);
	}
}